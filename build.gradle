buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'net.minecraftforge.gradle'
version = "$version"
def env = System.getenv()
if (env.BUILD_NUMBER) {
    version = version + "-" + "${env.BUILD_NUMBER}"
}
group = 'com.direwolf20.buildinggadgets'
archivesBaseName = 'buildinggadgets'

String forgeVersion = "${minecraft_version}-${forge_major}.${forge_minor}"
String forgeName = "$forge_base:$forgeVersion"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main {
        java {
            'src/main/java'
        }
        resources {
            'src/main/resources'
        }
    }
    test {
        java {
            'src/test/java'
        }
        resources {
            'src/test/resources'
        }
    }
}

configurations {
    apiImplementation.extendsFrom minecraft
    apiTestImplementation.extendsFrom apiImplementation
    implementation.extendsFrom apiImplementation
    testImplementation.extendsFrom apiTestImplementation, implementation
}

idea {
    module {
        sourceDirs+=sourceSets.api.java.srcDirs
        sourceDirs+=sourceSets.api.resources.srcDirs
        testSourceDirs+= sourceSets.apiTest.java.srcDirs
        testSourceDirs+= sourceSets.apiTest.resources.srcDirs
    }
}

minecraft {
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    runs {
        client = {
            properties 'forge.logging.markers': 'FORGEMOD,REGISTRIES'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            sources sourceSets.main
        }
        server = {
            properties 'forge.logging.markers': 'FORGEMOD,REGISTRIES'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            sources sourceSets.main
        }
    }
}

dependencies {
    minecraft forgeName

    testImplementation "org.junit.jupiter:junit-jupiter-api:${project.junit_version}"
    testImplementation "org.junit.jupiter:junit-jupiter:${project.junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project.junit_version}"
    // deobfCompile "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}:api"
    // deobfCompile "refinedstorage:refinedstorage:${rs_version}:api"
    // runtime "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Processes main only resources
processResources {
    inputs.property('version', project.version)
    inputs.property('api_version', project.api_version)
    inputs.property('forge_major', project.forge_major)
    inputs.property('update_json', project.update_json)

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version':project.version, 'api_version':project.api_version,'forge_major':project.forge_major,'update_json':project.update_json
    }
    
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    group = project.artifactGroup
    manifest {
        attributes(["Specification-Title": "Buildinggadgets",
                    "Specification-Version": forge_major, // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.archivesBaseName,
                    "Implementation-Version": project.version,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
    from sourceSets.main.output
    dependsOn classes
}

task sourcesJar(type: Jar, dependsOn: classes) {
    group = project.artifactGroup
    manifest = jar.manifest
    classifier = 'sources'
    from sourceSets.main.allSource
}
