buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'

version = "$version"
group = 'com.direwolf20.buildinggadgets' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'buildinggadgets'
String forgeName = "$forge_base:$minecraft_version-$forge_version"
String launcherName = "$forge_base:launcher:$minecraft_version-$forge_version"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    api {
        java {
            'src/api/java'
        }
        resources {
            'src/api/resources'
        }
    }
    apiTest {
        java {
            'src/apiTest/java'
        }
        resources {
            'src/apiTest/resources'
        }
    }
    main {
        java {
            'src/main/java'
        }
        resources {
            'src/main/resources'
        }
    }
    test {
        java {
            'src/test/java'
        }
        resources {
            'src/test/resources'
        }
    }
}

configurations {
    apiImplementation {
        extendsFrom minecraft
    }
    apiTestImplementation {
        extendsFrom apiImplementation
    }
    implementation {
        extendsFrom apiImplementation
    }
}

idea {
    module {
        sourceDirs+=sourceSets.api.java.srcDirs
        sourceDirs+=sourceSets.api.resources.srcDirs
        testSourceDirs+= sourceSets.apiTest.java.srcDirs
        testSourceDirs+= sourceSets.apiTest.resources.srcDirs
    }
}

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20180921-1.13'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    //accessTransformer = file('my_at.cfg')

    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            sources sourceSets.api, sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            sources sourceSets.api, sourceSets.main
        }
    }
	/*maven {
        name 'Raoulvdberge Repo' // RS
        url 'https://repo.raoulvdberge.com/'
    }*/
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft forgeName
    apiTestImplementation sourceSets.api.output
    implementation sourceSets.api.output
    testImplementation sourceSets.apiTest.output
    // deobfCompile "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}:api"
    // deobfCompile "refinedstorage:refinedstorage:${rs_version}:api"
    // runtime "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}"

    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    //deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

/*
processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version':"$version", 'mcversion':project.minecraft.version, 'updatejson':update_json
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}*/

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes(["Specification-Title": "Buildinggadgets",
                    //"Specification-Vendor": "examplemodsareus",
                    "Specification-Version": "25.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    //"Implementation-Vendor" :"examplemodsareus",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
    from sourceSets.api.output
    dependsOn apiClasses
}
